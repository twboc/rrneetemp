// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto]
}

model user {
  id            String   @id @default(uuid()) @db.Uuid
  created_at    DateTime @default(now())
  email         String   @unique
  phone         String
  name          String
  given_name    String
  family_name   String
  locale        String
  salt          String   @default("")
  password_hash String   @default("")

  user_organisation user_organisation[]
  domain_permissions domain_permission[]
}

model organisation {
  id   String @id @default(uuid()) @db.Uuid
  name String

  user_organisation user_organisation[]
  client_organisation client_organisation[]
  domain_permissions domain_permission[]
}

model user_organisation {
  user    user   @relation(fields: [user_id], references: [id])
  user_id String @db.Uuid

  organisation    organisation @relation(fields: [organisation_id], references: [id])
  organisation_id String       @db.Uuid

  position String

  @@id([user_id, organisation_id])
}

model client {
  id   String @id @default(uuid()) @db.Uuid
  name String

  client_organisation client_organisation[]
}

model client_organisation {
  client    client @relation(fields: [client_id], references: [id])
  client_id String @db.Uuid

  organisation    organisation @relation(fields: [organisation_id], references: [id])
  organisation_id String       @db.Uuid

  position String

  @@id([client_id, organisation_id])
}

model google_token_data {
  id            String   @id @default(uuid()) @db.Uuid
  user_id       String   @db.Uuid
  created_at    DateTime @default(now())
  access_token  String
  expires_in    Int
  refresh_token String
  scope         String
  token_type    String
  id_token      String
}

model google_id_token {
  id             String  @id @default(uuid()) @db.Uuid
  user_id        String  @db.Uuid
  iss            String
  azp            String
  aud            String
  sub            String
  email          String
  email_verified Boolean
  at_hash        String
  name           String
  picture        String
  given_name     String
  family_name    String
  locale         String
  iat            Int
  exp            Int
}

///////////////////////////////////////////////////////////////////////////
// POSITION TRACKER START                                                //
///////////////////////////////////////////////////////////////////////////

model domain {
  id String @id @default(uuid()) @db.Uuid
  domain String

  tombstone Boolean @default(false)

  query query[]
  domain_permission domain_permission[]
  domain_order domain_order[]
}

model domain_order {
  id String @id @default(uuid()) @db.Uuid

  domain domain @relation(fields: [domain_id], references: [id])
  domain_id String @db.Uuid

  created_at DateTime @default(now())
  finished_at DateTime?
  
  status String @default("pending") //pending, finished, errored
  type String @default("automatic") //manual, automatic

}

model domain_permission {
  id String @id @default(uuid()) @db.Uuid

  domain domain @relation(fields: [domain_id], references: [id])
  domain_id String @db.Uuid

  organisation    organisation @relation(fields: [organisation_id], references: [id])
  organisation_id String       @db.Uuid

  user    user   @relation(fields: [user_id], references: [id])
  user_id String @db.Uuid

  access String

}

model query {
  id String @id @default(uuid()) @db.Uuid

  domain domain @relation(fields: [domain_id], references: [id])
  domain_id String @db.Uuid

  query String
  created_at DateTime @default(now())

  query_variant query_variant[]
}


model query_variant {
  id   String @id @default(uuid()) @db.Uuid

  query query @relation(fields: [query_id], references: [id])
  query_id String @db.Uuid

  search_engine String
  device String

  query_variant_order query_variant_order[]
  query_variant_result query_variant_result[]

}

model query_variant_order {
  id String @id @default(uuid()) @db.Uuid

  query_variant query_variant @relation(fields: [query_variant_id], references: [id])
  query_variant_id String @db.Uuid

  domain String
  domain_order_id String

  status String
  created_at DateTime @default(now())
  checked_at DateTime?

  type String @default("automatic") //manual, automatic

  query_variant_result query_variant_result[]

}

model query_variant_result {
  id String @id @default(uuid()) @db.Uuid

  query_variant query_variant @relation(fields: [query_variant_id], references: [id])
  query_variant_id String @db.Uuid

  query_variant_order query_variant_order @relation(fields: [query_variant_order_id], references: [id])
  query_variant_order_id String @db.Uuid

  domain String
  domain_order_id String

  status String
  created_at DateTime @default(now())
  checked_at DateTime?
  position Int
  
  url String
  type String @default("automatic") //manual, automatic

}

///////////////////////////////////////////////////////////////////////////
// POSITION TRACKER END                                                  //
///////////////////////////////////////////////////////////////////////////
